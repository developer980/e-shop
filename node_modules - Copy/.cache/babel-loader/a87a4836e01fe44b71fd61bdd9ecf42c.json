{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tudor\\\\OneDrive\\\\Desktop\\\\React\\\\e-shop\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Login from \"./pages/Login\";\nimport Page404 from \"./pages/Page404\";\nimport Category from \"./pages/Category\";\nimport \"./utils/utility-classes.css\"; // Dupa ce am instalat pachetul react-with-firebase-auth, trebuie sa importam urmatoarele pachete:\n\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\"; // ATENTIE! Nu luati path-uri cu copy-paste fara sa va ganditi unde aveti fisierele echivalente in proiect!\n\nimport firebaseConfig from \"./configs/firebase\"; // Pornind de la obiectul de configurare, trebuie sa initializam aplicatia de firebase,\n// folosind metoda initializaApp, pe care firebase ne-o pune la dispozitie.\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig); // Dupa ce initializam aplicatia de firebase, putem sa ne folosim de metodele de autentificare, pe care aceasta\n// ne-o pune la dispozitie.\n\nconst firebaseAppAuth = firebaseApp.auth(); // In cazul in care folosim provideri externi pentru autentificare, trebuie sa cream un nou obiect corespunzator.\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider()\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    // La console.log-ul props-urilor ne apar cateva noi, dintre care de interes sunt:\n    // user, signInWithGoogle, signOut. Ele au venit prin HOC-ul withFirebaseAuth(vezi teorie).\n    // Props-ul signInWithGoogle trebuie pasat catre componenta Login, iar signOut catre\n    // componenta Header, aflata in majoritatea paginilor.\n    console.log(\"App.js props: \", this.props);\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/login\" // Pentru a pasa props-uri catre componenta din Route, trebuie sa folosim render(vezi teorie)\n      ,\n      render: props => React.createElement(Login // props-urile de aici sunt props-urile referitoare la router(match, history...)\n      , Object.assign({}, props, {\n        // Trebuie sa trimitem mai departe metoda signInWithGoogle, furnizata de Firebase, pentru\n        // a fi apelata din pagina de login.\n        signInWithGoogle: this.props.signInWithGoogle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\" // Trebuie sa trimitem props-uri către componenta din Route => avem nevoie de render\n      ,\n      render: props => React.createElement(Home, Object.assign({}, props, {\n        // Trimitem informatiile despre user, venite de la Firebase, catre Home.\n        user: this.props.user // Trimitem metoda signOut, venita de la Firebase, catre Home. Cand va fi apelata\n        // userul se va deloga.\n        ,\n        signOut: this.props.signOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/about\",\n      component: About,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/category/:categoryName\",\n      component: Category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"*\",\n      component: Page404,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  }\n\n} // ATENTIE! withFirebaseAuth este o HOC(vezi teorie). Practic, nu mai exportam direct App-ul,\n// ci inainte ii extindem functionalitatea, pasandu-i informatii suplimetare, despre firebase.\n// Folosind acest HOC, in App vom primi noi props-uri, de la firebase!\n\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth\n})(App);","map":{"version":3,"sources":["C:/Users/tudor/OneDrive/Desktop/React/e-shop/src/App.js"],"names":["React","Switch","Route","Home","About","Login","Page404","Category","withFirebaseAuth","firebase","firebaseConfig","firebaseApp","initializeApp","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","App","Component","constructor","state","render","console","log","props","signInWithGoogle","user","signOut"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,6BAAP,C,CACA;;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B;AACA,OAAO,eAAP,C,CACA;;AACA,OAAOC,cAAP,MAA2B,oBAA3B,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGF,QAAQ,CAACG,aAAT,CAAuBF,cAAvB,CAApB,C,CACA;AACA;;AACA,MAAMG,eAAe,GAAGF,WAAW,CAACG,IAAZ,EAAxB,C,CACA;;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,cAAc,EAAE,IAAIP,QAAQ,CAACK,IAAT,CAAcG,kBAAlB;AADA,CAAlB;;AAIA,MAAMC,GAAN,SAAkBlB,KAAK,CAACmB,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,KAAKC,KAAnC;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,QADP,CAEE;AAFF;AAGE,MAAA,MAAM,EAAGA,KAAD,IACN,oBAAC,KAAD,CACE;AADF,0BAEMA,KAFN;AAGE;AACA;AACA,QAAA,gBAAgB,EAAE,KAAKA,KAAL,CAAWC,gBAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAcE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,GAFP,CAGE;AAHF;AAIE,MAAA,MAAM,EAAGD,KAAD,IACN,oBAAC,IAAD,oBACMA,KADN;AAEE;AACA,QAAA,IAAI,EAAE,KAAKA,KAAL,CAAWE,IAHnB,CAIE;AACA;AALF;AAME,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,OANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,EA6BE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAExB,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,EAgCE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,yBAAZ;AAAsC,MAAA,SAAS,EAAEG,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCF,EAiCE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,SAAS,EAAED,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCF,CADF,CADF;AAuCD;;AApD+B,C,CAuDlC;AACA;AACA;;;AACA,eAAeE,gBAAgB,CAAC;AAC9BO,EAAAA,SAD8B;AAE9BF,EAAAA;AAF8B,CAAD,CAAhB,CAGZK,GAHY,CAAf","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Login from \"./pages/Login\";\nimport Page404 from \"./pages/Page404\";\nimport Category from \"./pages/Category\";\nimport \"./utils/utility-classes.css\";\n// Dupa ce am instalat pachetul react-with-firebase-auth, trebuie sa importam urmatoarele pachete:\nimport withFirebaseAuth from \"react-with-firebase-auth\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n// ATENTIE! Nu luati path-uri cu copy-paste fara sa va ganditi unde aveti fisierele echivalente in proiect!\nimport firebaseConfig from \"./configs/firebase\";\n\n// Pornind de la obiectul de configurare, trebuie sa initializam aplicatia de firebase,\n// folosind metoda initializaApp, pe care firebase ne-o pune la dispozitie.\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n// Dupa ce initializam aplicatia de firebase, putem sa ne folosim de metodele de autentificare, pe care aceasta\n// ne-o pune la dispozitie.\nconst firebaseAppAuth = firebaseApp.auth();\n// In cazul in care folosim provideri externi pentru autentificare, trebuie sa cream un nou obiect corespunzator.\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    // La console.log-ul props-urilor ne apar cateva noi, dintre care de interes sunt:\n    // user, signInWithGoogle, signOut. Ele au venit prin HOC-ul withFirebaseAuth(vezi teorie).\n    // Props-ul signInWithGoogle trebuie pasat catre componenta Login, iar signOut catre\n    // componenta Header, aflata in majoritatea paginilor.\n    console.log(\"App.js props: \", this.props);\n\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route\n            path=\"/login\"\n            // Pentru a pasa props-uri catre componenta din Route, trebuie sa folosim render(vezi teorie)\n            render={(props) => (\n              <Login\n                // props-urile de aici sunt props-urile referitoare la router(match, history...)\n                {...props}\n                // Trebuie sa trimitem mai departe metoda signInWithGoogle, furnizata de Firebase, pentru\n                // a fi apelata din pagina de login.\n                signInWithGoogle={this.props.signInWithGoogle}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/\"\n            // Trebuie sa trimitem props-uri către componenta din Route => avem nevoie de render\n            render={(props) => (\n              <Home\n                {...props}\n                // Trimitem informatiile despre user, venite de la Firebase, catre Home.\n                user={this.props.user}\n                // Trimitem metoda signOut, venita de la Firebase, catre Home. Cand va fi apelata\n                // userul se va deloga.\n                signOut={this.props.signOut}\n              />\n            )}\n          />\n          <Route path=\"/about\" component={About} />\n          {/* ATENTIE! In pagina de categorie nu se va reflecta faptul ca ne-am logat, deoarece catre headerul ei\n          nu am pasat informatiile userului sau cele doua functii necesare delogarii. Vom rezolva asta data viitoare */}\n          <Route path=\"/category/:categoryName\" component={Category} />\n          <Route path=\"*\" component={Page404} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\n// ATENTIE! withFirebaseAuth este o HOC(vezi teorie). Practic, nu mai exportam direct App-ul,\n// ci inainte ii extindem functionalitatea, pasandu-i informatii suplimetare, despre firebase.\n// Folosind acest HOC, in App vom primi noi props-uri, de la firebase!\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(App);\n"]},"metadata":{},"sourceType":"module"}